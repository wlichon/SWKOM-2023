// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NPaperless.Services.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NPaperless.Services.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231127110445_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NPaperless.Services.Models.Correspondent", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("document_count")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "document_count");

                    b.Property<bool>("is_insensitive")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_insensitive");

                    b.Property<DateTime>("last_correspondence")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "last_correspondence");

                    b.Property<string>("match")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "match");

                    b.Property<long>("matching_algorithm")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "matching_algorithm");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.HasKey("id");

                    b.ToTable("Correspondents");
                });

            modelBuilder.Entity("NPaperless.Services.Models.Document", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("ArchiveSerialNumber")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "archive_serial_number");

                    b.Property<string>("ArchivedFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "archived_file_name");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "original_file_name");

                    b.Property<DateTime>("added")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "added");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<long?>("correspondent")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "correspondent");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<long?>("documentType")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "document_type");

                    b.Property<DateTime>("modified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "modified");

                    b.Property<long?>("storagePath")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "storage_path");

                    b.Property<long[]>("tags")
                        .IsRequired()
                        .HasColumnType("bigint[]")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.HasKey("id");

                    b.ToTable("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
