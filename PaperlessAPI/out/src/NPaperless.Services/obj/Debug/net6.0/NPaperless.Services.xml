<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NPaperless.Services</name>
    </assembly>
    <members>
        <member name="T:NPaperless.Services.Attributes.ValidateModelStateAttribute">
            <summary>
            Model state validation attribute
            </summary>
        </member>
        <member name="M:NPaperless.Services.Attributes.ValidateModelStateAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Called before the action method is invoked
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:NPaperless.Services.Authentication.ApiKeyRequirement">
            <summary>
            A requirement that an ApiKey must be present.
            </summary>
        </member>
        <member name="P:NPaperless.Services.Authentication.ApiKeyRequirement.ApiKeys">
            <summary>
            Get the list of api keys
            </summary>
        </member>
        <member name="P:NPaperless.Services.Authentication.ApiKeyRequirement.PolicyName">
            <summary>
            Get the policy name,
            </summary>
        </member>
        <member name="M:NPaperless.Services.Authentication.ApiKeyRequirement.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a new instance of the <see cref="T:NPaperless.Services.Authentication.ApiKeyRequirement"/> class.
            </summary>
            <param name="apiKeys"></param>
            <param name="policyName"></param>
        </member>
        <member name="T:NPaperless.Services.Authentication.ApiKeyRequirementHandler">
            <summary>
            Enforce that an api key is present.
            </summary>
        </member>
        <member name="M:NPaperless.Services.Authentication.ApiKeyRequirementHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,NPaperless.Services.Authentication.ApiKeyRequirement)">
            <copydoc cref="M:Microsoft.AspNetCore.Authorization.AuthorizationHandler`1.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,`0)" />
        </member>
        <member name="T:NPaperless.Services.Converters.CustomEnumConverter`1">
            <summary>
            Custom string to enum converter
            </summary>
        </member>
        <member name="M:NPaperless.Services.Converters.CustomEnumConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determine if we can convert a type to an enum
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:NPaperless.Services.Converters.CustomEnumConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a type value to an enum
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NPaperless.Services.Filters.BasePathFilter">
            <summary>
            BasePath Document Filter sets BasePath property of OpenAPI and removes it from the individual URL paths
            </summary>
        </member>
        <member name="M:NPaperless.Services.Filters.BasePathFilter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="basePath">BasePath to remove from Operations</param>
        </member>
        <member name="P:NPaperless.Services.Filters.BasePathFilter.BasePath">
            <summary>
            Gets the BasePath of the OpenAPI Doc
            </summary>
            <returns>The BasePath of the OpenAPI Doc</returns>
        </member>
        <member name="M:NPaperless.Services.Filters.BasePathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            Apply the filter
            </summary>
            <param name="openapiDoc">OpenApiDocument</param>
            <param name="context">FilterContext</param>
        </member>
        <member name="T:NPaperless.Services.Filters.GeneratePathParamsValidationFilter">
            <summary>
            Path Parameter Validation Rules Filter
            </summary>
        </member>
        <member name="M:NPaperless.Services.Filters.GeneratePathParamsValidationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Constructor
            </summary>
            <param name="operation">Operation</param>
            <param name="context">OperationFilterContext</param>
        </member>
        <member name="T:NPaperless.Services.Formatters.InputFormatterStream">
            <inheritdoc />
        </member>
        <member name="M:NPaperless.Services.Formatters.InputFormatterStream.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NPaperless.Services.Formatters.InputFormatterStream.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="M:NPaperless.Services.Formatters.InputFormatterStream.CanReadType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:NPaperless.Services.OpenApi.TypeExtensions">
            <summary>
            Replacement utilities from Swashbuckle.AspNetCore.SwaggerGen which are not in 5.x
            </summary>
        </member>
        <member name="M:NPaperless.Services.OpenApi.TypeExtensions.FriendlyId(System.Type,System.Boolean)">
            <summary>
            Produce a friendly name for the type which is unique.
            </summary>
            <param name="type"></param>
            <param name="fullyQualified"></param>
        </member>
        <member name="M:NPaperless.Services.OpenApi.TypeExtensions.FullNameSansTypeParameters(System.Type)">
            <summary>
            Determine the fully qualified type name without type parameters.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:NPaperless.Services.Program">
            <summary>
            Program
            </summary>
        </member>
        <member name="M:NPaperless.Services.Program.Main(System.String[])">
            <summary>
            Main
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NPaperless.Services.Program.CreateHostBuilder(System.String[])">
            <summary>
            Create the host builder.
            </summary>
            <param name="args"></param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="T:NPaperless.Services.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="M:NPaperless.Services.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:NPaperless.Services.Startup.Configuration">
            <summary>
            The application configuration.
            </summary>
        </member>
        <member name="M:NPaperless.Services.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:NPaperless.Services.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
